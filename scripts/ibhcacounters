#!/bin/bash
#
#  Copyright (C) 2010 Lawrence Livermore National Security LLC
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Ira Weiny weiny2@llnl.gov
#  UCRL-CODE-235440
#  
#  This file is part of pragmatic-infiniband-tools (PIU), usefull tools to manage
#  Infiniband Clusters.
#  For details, see http://www.llnl.gov/linux/.
#  
#  PIU is free software; you can redistribute it
#  and/or modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the License,
#  or (at your option) any later version.
#  
#  PIU is distributed in the hope that it will be
#  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#  
#  You should have received a copy of the GNU General Public License along with
#  PIU; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
#

argv0=`basename $0`
function usage
{
   echo "Usage: $argv0 [-hca]"
   echo ""
   echo "   read the diag counters from an hca"
   echo "   NOTE: currently only ConnectX cards are supported"
   echo ""
   echo "   -h Display this help"
   echo "   -c Clear the counters (after reading them)"
   echo "   -a Report \"all\" counters even if they are \"0\""
}

RC=0

# process command line
ib_sysfs="/sys/class/infiniband"
clear_mode="false"
all="false"
while getopts "hca" flag
do
   case $flag in
      "h") usage; exit 0;;
      "c") clear_mode="true";;
      "a") all="true";;
      *) usage; exit 1;;
   esac
done

shift $(($OPTIND - 1))

function do_mlx4
{
   card=$1
   if [ ! -d $ib_sysfs/$card/diag_counters ]; then
      echo "ERR: $card does not export diag_counters; skipping"
      RC=1
      return
   fi
   for file in `ls $ib_sysfs/$card/diag_counters/*`; do
      label=`basename $file`
      if [ "$label" == "clear_diag" ]; then
         continue
      fi
      cnt=`cat $file`
      if [ "$all" == "true" ] || [ "$cnt" != "0" ]; then
         printf "%16s : %d\n" $label $cnt
      fi
   done
   if [ "$clear_mode" == "true" ]; then
      if [ -f $ib_sysfs/$card/diag_counters/clear_diag ]; then
         echo 1 > $ib_sysfs/$card/diag_counters/clear_diag
      else
         echo "ERR: \"$ib_sysfs/$card/diag_counters/clear_diag\"; file not found"
	 RC=1
      fi
   fi
}

function do_qib
{
   card=$1
   ports=`ls $ib_sysfs/$card/ports`
   for port in $ports; do
      if [ ! -d $ib_sysfs/$card/ports/$port/diag_counters ]; then
         echo "ERR: $card does not export diag_counters; skipping"
         RC=1
         return
      fi
      for file in `ls $ib_sysfs/$card/ports/$port/diag_counters/*`; do
         label=`basename $file`
         cnt=`cat $file`
         if [ "$all" == "true" ] || [ "$cnt" != "0" ]; then
            printf "%d: %16s : %d\n" $port $label $cnt
         fi
         if [ "$clear_mode" == "true" ]; then
            echo 0 > $ib_sysfs/$card/ports/$port/diag_counters/$label
         fi
      done
   done
}

for card in `ls $ib_sysfs`; do
   ctype=`echo $card | sed -e 's/\(.*\)[0-9]/\1/g'`
   if [ "$ctype" == "mlx4_" ]; then
      do_mlx4 $card
   elif [ "$ctype" == "qib" ]; then
      do_qib $card
   else
      echo "ERR: Card type \"$ctype\"(\"$card\") is not supported"
      RC=1
   fi
done

exit $RC


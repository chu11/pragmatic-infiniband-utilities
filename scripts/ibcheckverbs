#!/bin/sh
#
#  Copyright (C) 2007 The Regents of the University of California.
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Ira Weiny weiny2@llnl.gov
#  UCRL-CODE-235440
#  
#  This file is part of pragmatic-infiniband-tools (PIU), useful tools to manage
#  Infiniband Clusters.
#  For details, see http://www.llnl.gov/linux/.
#  
#  PIU is free software; you can redistribute it
#  and/or modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the License,
#  or (at your option) any later version.
#  
#  PIU is distributed in the hope that it will be
#  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#  
#  You should have received a copy of the GNU General Public License along with
#  PIU; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
#

argv0=`basename $0`
function usage
{
   echo "Usage: $argv0 [-haAvb] [-s <size>] [-n <iters>] "
   echo "              <node0>[:<dev>:<port>] <node1>[:<dev>:<port>]"
   echo "   Test the verbs connection between 2 nodes"
   echo ""
   echo "   -h Display this help"
   echo "   -v run verbs test only"
   echo "   -b run rdma_bw test only"
   echo "   -r <rdma_bw> use specified rdma_bw executable"
   echo "   -s <size> specify the -s option to rdma_bw test"
   echo "   -n <iters> specify the -n option to rdma_bw test"
   echo "   -m show full output from commands run (messy)"
   echo ""
   echo "      The options below run significantly slower but send more data"
   echo ""
   echo "   -a Run a series of RDMA BW tests with various packet sizes (short)"
   echo "   -A Run a series of RDMA BW tests with various packet sizes (long)"
   echo ""
   echo "   Examples:"
   echo "      $argv0 e1 e2"
   echo "         Run test between node 1 and 2 using first device found, port 1"
   echo "      $argv0 e1::2 e2"
   echo "         Run test between node 1 using first device found, port 2 and"
   echo "         default device, port 1 on node 2"
   echo "      $argv0 e1 e2:mlx4_1:2"
   echo "         Run test between default device, port 1 on node 1 and "
   echo "         node 1, device mlx4_1, port 2"
}

# this tool's name was changed.  Define the options we are looking for
rdma_bw_1="/usr/bin/ib_rdma_bw"
rdma_bw_2="/usr/bin/rdma_bw"

# process command line
bw_exe=""
pdsh_exe="/usr/bin/pdsh"
pp_exe="/usr/bin/ibv_rc_pingpong"
data_amount=""
data_size=1024
iters=10000
band_width_test="true"
verbs_test="true"
messy_output="false"
while getopts "haAs:n:bvr:d:i:m" flag
do
   case $flag in
      "h") usage; exit 0;;
      "a") data_amount="variable";;
      "A") data_amount="Variable";;
      "s") data_size=$OPTARG;;
      "n") iters=$OPTARG;;
      "v") band_width_test="false";;
      "b") verbs_test="false";;
      "m") messy_output="true";;
      "r")
            bw_exe=$OPTARG;
            ;;
      *) usage; exit 1;;
   esac
done

shift $(($OPTIND - 1))

if [ "$1" == "" ] || [ "$2" == "" ]; then
   usage
   exit 1
fi

if [ ! -x $pdsh_exe ]; then
   echo "Error: pdsh is required for ibcheckverbs"
   exit 1
fi

if [ "$bw_exe" == "" ]; then
   # attempt to find bandwith test installed
   if [ -x $rdma_bw_1 ]; then
      bw_exe=$rdma_bw_1
   else
      if [ -x $rdma_bw_2 ]; then
         bw_exe=$rdma_bw_2
      else
         echo "ERROR: rdma_bw command not found"
         echo ""
         usage; exit 1
      fi
   fi
fi

host1=`echo $1 | sed -e "s/\([^:]*\):.*/\1/"`
host2=`echo $2 | sed -e "s/\([^:]*\):.*/\1/"`
host1_dev_opts=`echo $1 | awk -F: '{ if ($2) printf "-d "; printf $2; if ($3) printf " -i "; printf $3; print "" }'`
host2_dev_opts=`echo $2 | awk -F: '{ if ($2) printf "-d "; printf $2; if ($3) printf " -i "; printf $3; print "" }'`

# make sure servers/clients are not runing
function clean_up
{
   if [ $messy_output == "true" ]; then
      echo ""
      echo " ***** Cleaning up...  *****"
   fi
   $pdsh_exe -S -w $host1 killall $pp_exe &> /dev/null
   $pdsh_exe -S -w $host2 killall $pp_exe &> /dev/null

   $pdsh_exe -S -w $host1 killall $bw_exe &> /dev/null
   $pdsh_exe -S -w $host2 killall $bw_exe &> /dev/null
   rm -f /tmp/ibcheckverbs.*
}

# a basic ping pong test
function basic_verbs
{
   TMP1=`mktemp /tmp/ibcheckverbs.XXXXXXXX`
   TMP2=`mktemp /tmp/ibcheckverbs.XXXXXXXX`
   echo ""
   echo " ***** Starting Basic verbs tests...  *****"
   echo ""
   if [ $messy_output == "true" ]; then
      echo "       Server $host1 ($host1_dev_opts) <== Client $host2 ($host2_dev_opts)"
   else
      echo -n "   $host2 ($host2_dev_opts) ==> $host1 ($host1_dev_opts) : "
   fi
   $pdsh_exe -S -w $host1 $pp_exe $host1_dev_opts > $TMP1 &
   sleep 1
   $pdsh_exe -S -w $host2 $pp_exe $host2_dev_opts $host1 > $TMP2

   if [ $messy_output == "true" ]; then
      cat $TMP1
      cat $TMP2
   else
      h1bw=`grep "bytes.*seconds" $TMP1 | sed -e 's/.*= \([0-9\.]* Mbit\/sec\)$/\1/'`
      h2bw=`grep "bytes.*seconds" $TMP2 | sed -e 's/.*= \([0-9\.]* Mbit\/sec\)$/\1/'`
      echo -e "$h1bw\t$h2bw"
   fi

   if [ $messy_output == "true" ]; then
      echo "       Server $host2 ($host2_dev_opts) <== Client $host1 ($host1_dev_opts) "
   else
      echo -n "   $host1 ($host1_dev_opts) ==> $host2 ($host2_dev_opts) : "
   fi
   $pdsh_exe -S -w $host2 $pp_exe $host2_dev_opts > $TMP1 &
   sleep 1
   $pdsh_exe -S -w $host1 $pp_exe $host1_dev_opts $host2 > $TMP2

   if [ $messy_output == "true" ]; then
      cat $TMP1
      cat $TMP2
   else
      h1bw=`grep "bytes.*seconds" $TMP1 | sed -e 's/.*= \([0-9\.]* Mbit\/sec\)$/\1/'`
      h2bw=`grep "bytes.*seconds" $TMP2 | sed -e 's/.*= \([0-9\.]* Mbit\/sec\)$/\1/'`
      echo -e "$h1bw\t$h2bw"
   fi
}

function print_rdma_header
{
   echo ""
   echo " ***** Starting RDMA bandwidth tests...  *****"
   echo "       Server $host1 ($host1_dev_opts) <==> Client $host2 ($host2_dev_opts) "
   echo ""
   echo -e "     parameters \t\t\t:\t$host1   $host2"
   echo ""
}

# RDMA bandwidth tests
function run_bw_exe
{
   TMP1=`mktemp /tmp/ibcheckverbs.XXXXXXXX`
   TMP2=`mktemp /tmp/ibcheckverbs.XXXXXXXX`

   if [ $messy_output == "true" ]; then
      echo " ( parameters $bw_exe $data_amount -b )"
   else
      echo -e -n "     $bw_exe $data_amount -b\t:\t"
   fi

   $pdsh_exe -S -w $host1 $bw_exe $host1_dev_opts $data_amount -b > $TMP1 &
   sleep 1
   $pdsh_exe -S -w $host2 $bw_exe $host2_dev_opts $data_amount -b $host1 > $TMP2

   if [ $messy_output == "true" ]; then
      cat $TMP1
      cat $TMP2
   else
      h1bw=`grep "Bandwidth average" $TMP1 | sed -e 's/.*: \([0-9\.]* MB\/sec\)$/\1/'`
      h2bw=`grep "Bandwidth average" $TMP2 | sed -e 's/.*: \([0-9\.]* MB\/sec\)$/\1/'`
      echo -e "$h1bw\t$h2bw"
   fi
}

# MAIN
clean_up
if [ "$data_amount" == "variable" ] || [ "$data_amount" == "Variable" ]; then
   if [ "$data_amount" == "Variable" ]; then
      total_data_size=100000000000
      msg_sizes="10 100 1000 10000 100000 1000000 10000000 100000000"
   else
      total_data_size=10000000
      msg_sizes="1000 10000 100000 1000000"
   fi

   print_rdma_header

   for msg_size in $msg_sizes; do
      num_msg=$((total_data_size/msg_size))
      if [ $num_msg -gt 10000 ]; then
         num_msg=10000
      fi
      if [ $num_msg -lt 2 ]; then
         num_msg=2
      fi
      data_amount="-s $msg_size -n $num_msg"
      run_bw_exe
   done
else
   if [ "$verbs_test" == "true" ]; then
      basic_verbs
   fi
   if [ "$band_width_test" == "true" ]; then
      print_rdma_header
      data_amount="-s $data_size -n $iters"
      run_bw_exe
   fi
fi
clean_up


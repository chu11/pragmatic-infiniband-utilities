#!/bin/bash
#
#  Copyright (C) 2007 The Regents of the University of California.
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Ira Weiny weiny2@llnl.gov
#  UCRL-CODE-235440
#  
#  This file is part of pragmatic-infiniband-tools (PIU), usefull tools to manage
#  Infiniband Clusters.
#  For details, see http://www.llnl.gov/linux/.
#  
#  PIU is free software; you can redistribute it
#  and/or modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the License,
#  or (at your option) any later version.
#  
#  PIU is distributed in the hope that it will be
#  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#  
#  You should have received a copy of the GNU General Public License along with
#  PIU; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
#

sbindir=@PIU_SBIN_PATH@

log_dir=/var/log
log_file=infiniband_errors
lockfile=/tmp/ibtrackerrors.lock

cd ${0%/*}

function usage
{
   echo "Usage: $0 [-hcCl] [-m <node-name-map>]"
   echo "   Query errors on all switches in subnet"
   echo "   Also logs error counts in $log_dir/$log_file"
   echo "   -c clear errors after querying (Also logs this event)"
   echo "   -m <node-name-map> specify a different node name map file"
   echo "   -C attempt to clean up other instances and exit"
   echo "   -l remove lockfile and run anyway (USE WITH CAUTION)"
}

function clean_up_subs
{
   echo "Cleaning up old processes..."
   killall -9 ibqueryerrors
   killall -9 ibclearerrors
   killall -9 ibclearcounters
}

function rm_lock_file
{
   rm -f $lockfile
}

clear_errors="no"
clean_up="no"
rm_lock="no"
map_file=""

while getopts "hcClm:" flag
do
   case $flag in
      "h") usage; exit 0;;
      "c") clear_errors="yes";;
      "C") clean_up="yes";;
      "l") rm_lock="yes";;
      "m") map_file="--node-name-map $OPTARG";;
      *) usage; exit 1;;
   esac
done

shift $(($OPTIND - 1))

if [ "$clean_up" == "yes" ]; then
   clean_up_subs
   killall -9 ibtrackerrors
   exit 0
fi

if [ "$rm_lock" == "yes" ]; then
   clean_up_subs
   echo "Removing lockfile $lockfile"
   rm_lock_file
fi

lockfile -r 0 $lockfile
if [ "$?" != "0" ]; then
   echo "Failed to lock $lockfile"
   echo "  Please make sure that cron or another user is not running now."
   echo "  If you are sure that another user is not running try -C and/or -l"
   echo "  Exiting..."
   exit 1
fi

# check if we have the new ibqueryerrors
query_errors_exe="$sbindir/ibqueryerrors"
if [ -x $query_errors_exe ]; then
   # if we do then we can use the map file
   query_errors_exe="$query_errors_exe $map_file"
else
   # if not fall back to the previous version
   query_errors_exe="ibqueryerrors.pl -R"
fi

# check if we have the new --clear-errors option.
new_clear_option="no"
$query_errors_exe -h 2>&1 | grep -e "--clear-errors" > /dev/null
if [ "$?" == "0" ]; then
   new_clear_option="yes"
fi

# if we have the new clear use it.
if [ "$new_clear_option" == "yes" ] && [ "$clear_errors" == "yes" ]; then
   query_errors_exe="$query_errors_exe -k -K"
fi

echo "Checking errors..."
echo "Running: $query_errors_exe -s RcvSwRelayErrors -r --data"
$query_errors_exe -s RcvSwRelayErrors -r --data > /tmp/iberrors

cat /tmp/iberrors
ts=`date`

if [ "$clear_errors" == "yes" ]; then
   if [ "$new_clear_option" == "no" ]; then
      echo " -c specified, clearing errors"
      ibclearerrors; ibclearcounters
   fi
   echo " -c specified, errors cleared"
   echo "     ***** ERRORS CLEARED ($ts) *****" >> /tmp/iberrors
fi

echo "" >> $log_dir/$log_file
echo "" >> $log_dir/$log_file
echo "     ***** ERRORS collected ($ts) *****" >> $log_dir/$log_file
cat /tmp/iberrors >> $log_dir/$log_file

rm_lock_file
exit 0


#!/usr/bin/perl
#
#  Copyright (C) 2007 The Regents of the University of California.
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Ira Weiny weiny2@llnl.gov
#  UCRL-CODE-235440
#  
#  This file is part of pragmatic-infiniband-tools (PIU), useful tools to manage
#  Infiniband Clusters.
#  For details, see http://www.llnl.gov/linux/.
#  
#  PIU is free software; you can redistribute it
#  and/or modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the License,
#  or (at your option) any later version.
#  
#  PIU is distributed in the hope that it will be
#  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#  
#  You should have received a copy of the GNU General Public License along with
#  PIU; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
#

use strict;
use Getopt::Std;
use IBswcountlimits;

my $sbindir="@PIU_SBIN_PATH@";

sub usage_and_exit
{
   my $prog = $_[0];
   print "Usage: $prog [-hced][-m <node-name-map>]\n";
	print "   Check the status of the IB fabric\n";
	print "   -c clear IB errors after check\n";
	print "   -s SKIP the IB errors check\n";
	print "   -d DON'T ignore down nodes\n";
	print "   -m <node-name-map> specify a different node name map file\n";
	print "\n";
	exit 0
}

sub execute_sub_command
{
   my $cmd = $_[0];
   system("$cmd");
   if ($? == -1) {
       print "ERROR: failed to execute: $cmd\n";
   }
   elsif ($? & 127) {
       printf "ERROR: \"$cmd\" died with signal %d\n", ($? & 127);
   }
   return $? >> 8;
}

my $argv0 = `basename $0`;
my $check_errors = "yes";
my $map_file = "";
my $clear_errors = "";
my $ignore_down_nodes = "yes";
$IBswcountlimits::auth_check;
chomp $argv0;
if (!getopts("hcsdm:")) { usage_and_exit $argv0; }
if (defined $Getopt::Std::opt_h) { usage_and_exit $argv0; }
if (defined $Getopt::Std::opt_c) { $clear_errors = "-c"; }
if (defined $Getopt::Std::opt_s) { $check_errors = "no"; }
if (defined $Getopt::Std::opt_d) { $ignore_down_nodes = "no"; }
if (defined $Getopt::Std::opt_m) { $map_file = "--node-name-map $Getopt::Std::opt_m"; }

my $rc = 0;
if ($check_errors eq "no") {
   my $link_info_exe = "$sbindir/iblinkinfo -c $map_file";
   if ($ignore_down_nodes eq "yes") {
      my $downnodes = `whatsup -d`;
      $downnodes = `$sbindir/ibtranslatename $downnodes`;
      chomp $downnodes;
      $link_info_exe = "$link_info_exe --downnodes '$downnodes'";
   }
   $rc = execute_sub_command("$link_info_exe");
} else {
   my $errors_exe = "$sbindir/ibtrackerrors $map_file $clear_errors";
   $rc = execute_sub_command("$errors_exe");
}

exit $rc;


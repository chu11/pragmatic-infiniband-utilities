/*
 * Copyright (C) 2010 Lawrence Livermore National Security
 * Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
 * Written by Ira Weiny weiny2@llnl.gov
 * UCRL-CODE-235440
 * 
 * This file is part of pragmatic-infiniband-tools (PIU), useful tools to manage
 * Infiniband Clusters.
 * For details, see http://www.llnl.gov/linux/.
 * 
 * PIU is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * PIU is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * PIU; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
 *
 */

#ifndef _IBFABRICCONF_H_
#define _IBFABRICCONF_H_

#define IBFC_CONFIG_DIR "@PIU_CONFIG_PATH@/pragmaticIB"
#define IBFC_DEF_CONFIG "@PIU_CONFIG_PATH@/pragmaticIB/ibfabricconf.xml"

#define IBFC_PORT_NUM_DONT_CARE -1
#define IBFC_PORT_NAME_DONT_CARE "-"

/* These are opaque data types */
typedef struct ibfc_conf ibfc_conf_t; /* configuration */
typedef struct ibfc_port ibfc_port_t; /* port  */
typedef struct ibfc_prop ibfc_prop_t; /* link properties */
typedef struct ibfc_port_list ibfc_port_list_t; /* port list */

/* alloc new config */
ibfc_conf_t *ibfc_alloc_conf(void);
void ibfc_free(ibfc_conf_t *fabricconf);
void ibfc_set_stderr(ibfc_conf_t *fabricconf, FILE *f); /* user owns f */
void ibfc_set_warn_dup(ibfc_conf_t *fabricconf, int warn_dup);

/* populate config from file specified */
int ibfc_parse_file(char *file, ibfc_conf_t *fabricconf);
	/* ibfc_parse_file will clear ports previously contained
	 * in fabricconf */

/* Accessor functions */
/* config */
char *ibfc_conf_get_name(ibfc_conf_t *conf);

/* get port functions */
ibfc_port_t *ibfc_get_port(ibfc_conf_t *fabricconf, char *name, int p_num);

int ibfc_get_port_list(ibfc_conf_t *fabricconf, char *name,
			ibfc_port_list_t **list);
	/* allocates "list" user must call ibfc_free_port_list */
void ibfc_free_port_list(ibfc_port_list_t *port_list);

/* port */
char *ibfc_port_get_name(ibfc_port_t *port);
int   ibfc_port_get_port_num(ibfc_port_t *port);
ibfc_prop_t *ibfc_port_get_prop(ibfc_port_t *port);
ibfc_port_t *ibfc_port_get_remote(ibfc_port_t *port);
void  ibfc_port_set_user(ibfc_port_t *port, void *user_data);
void *ibfc_port_get_user(ibfc_port_t *port);
	/* user owns "user_data" */

int ibfc_port_num_dont_care(ibfc_port_t *port);
int ibfc_port_name_dont_care(ibfc_port_t *port);
	/* don't cares allow for the configuration to indicate that something
	 * should be connected but we don't care what */

/* iter functions */
typedef void (*process_port_func)(ibfc_port_t *port, void *user_data);
void ibfc_iter_ports(ibfc_conf_t *fabricconf, process_port_func func,
                     void *user_data);
void ibfc_iter_port_list(ibfc_port_list_t *port_list,
			process_port_func func, void *user_data);

/* properties */
int ibfc_prop_get_speed(ibfc_prop_t *prop);
int ibfc_prop_get_width(ibfc_prop_t *prop);
char *ibfc_prop_str(ibfc_port_t *port, char ret[], unsigned n);
char *ibfc_prop_get_length(ibfc_prop_t *prop);

#endif /* _IBFABRICCONF_H_ */

